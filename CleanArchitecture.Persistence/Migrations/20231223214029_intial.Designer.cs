// <auto-generated />
using System;
using CleanArchitecture.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231223214029_intial")]
    partial class intial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeBarcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldOptionLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<int?>("CascadingFieldOptionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CascadingFieldOptionsId");

                    b.HasIndex("FieldsId");

                    b.ToTable("FieldOptionLists");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldOptionValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CascadingFieldOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNumbric")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CascadingFieldOptionsId");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldOptionValidations");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DecmialPlaces")
                        .HasColumnType("int");

                    b.Property<int?>("Digits")
                        .HasColumnType("int");

                    b.Property<int?>("FieldsId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<string>("regularExpression")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldsId");

                    b.ToTable("FieldOptions");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.Fields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<int?>("CascadingFieldId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("Unique")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CascadingFieldId");

                    b.HasIndex("FieldOptionId")
                        .IsUnique()
                        .HasFilter("[FieldOptionId] IS NOT NULL");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.Barcodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.FormBarcodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BarcodesId")
                        .HasColumnType("int");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BarcodesId");

                    b.HasIndex("FormsId");

                    b.ToTable("FormBarcodes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.FormFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldsId")
                        .HasColumnType("int");

                    b.Property<int>("FormsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldsId");

                    b.HasIndex("FormsId");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.Forms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.FieldImportData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<int?>("RepositoryFormImportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("RepositoryFormImportId");

                    b.ToTable("FieldImportDatas");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.Property<string>("SaveLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FolderId");

                    b.ToTable("RepositoryDocuments");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocumentField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FieldId");

                    b.ToTable("RepositoryDocumentFields");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preview")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("RepositoryFiles");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFileMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryMetadataId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("RepositoryMetadataId");

                    b.ToTable("RepositoryFileMetadata");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFileRedact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Fill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Left")
                        .HasColumnType("float");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<string>("RectBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RectBorderThickness")
                        .HasColumnType("int");

                    b.Property<double?>("ResizeHeight")
                        .HasColumnType("float");

                    b.Property<double?>("ResizeWidth")
                        .HasColumnType("float");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextFontSize")
                        .HasColumnType("int");

                    b.Property<double?>("TextHeight")
                        .HasColumnType("float");

                    b.Property<double?>("TextWidth")
                        .HasColumnType("float");

                    b.Property<double>("Top")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("RepositoryFileRedacts");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.Property<int?>("RepositoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("RepositoryFolders");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SelectedFormId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedRepositoriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SelectedFormId");

                    b.HasIndex("SelectedRepositoriesId");

                    b.ToTable("RepositoryForms");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFormImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublishFolderId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedFormId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedRepositoriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublishFolderId");

                    b.HasIndex("SelectedFormId");

                    b.HasIndex("SelectedRepositoriesId");

                    b.ToTable("RepositoryFormImports");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RepositoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("RepositoryMetadata");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryMetadataOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RepositoryMetadataId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryMetadataId");

                    b.ToTable("RepositoryMetadataOption");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FileId");

                    b.HasIndex("FolderId");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("RepositoryPermissons");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldOptionLists", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Field.FieldOptionLists", "CascadingFieldOptions")
                        .WithMany()
                        .HasForeignKey("CascadingFieldOptionsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Field.Fields", "Fields")
                        .WithMany("FieldOptionLists")
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CascadingFieldOptions");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldOptionValidation", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Field.FieldOptionLists", "CascadingFieldOptions")
                        .WithMany("FieldOptionValidations")
                        .HasForeignKey("CascadingFieldOptionsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Field.Fields", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CascadingFieldOptions");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldOptions", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Field.Fields", "Fields")
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.Fields", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Field.Fields", "CascadingField")
                        .WithMany()
                        .HasForeignKey("CascadingFieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Field.FieldOptions", "FieldOptions")
                        .WithOne()
                        .HasForeignKey("CleanArchitecture.Domain.Entities.Field.Fields", "FieldOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Field.FieldTypes", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CascadingField");

                    b.Navigation("FieldOptions");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.FormBarcodes", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Form.Barcodes", "Barcodes")
                        .WithMany("FormBarcodes")
                        .HasForeignKey("BarcodesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Form.Forms", "Forms")
                        .WithMany()
                        .HasForeignKey("FormsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Barcodes");

                    b.Navigation("Forms");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.FormFields", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Field.Fields", "Fields")
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Form.Forms", "Forms")
                        .WithMany("FormFields")
                        .HasForeignKey("FormsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fields");

                    b.Navigation("Forms");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.FieldImportData", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Field.Fields", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFormImport", "RepositoryFormImport")
                        .WithMany("FieldImportData")
                        .HasForeignKey("RepositoryFormImportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Field");

                    b.Navigation("RepositoryFormImport");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocument", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Form.Forms", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFolder", "Folder")
                        .WithMany("Documents")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocumentField", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocument", "Document")
                        .WithMany("Fields")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Field.Fields", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFile", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocument", "Document")
                        .WithMany("Files")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFileMetadata", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFile", "File")
                        .WithMany("RepositoryFileMetadata")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryMetadata", "RepositoryMetadata")
                        .WithMany()
                        .HasForeignKey("RepositoryMetadataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("RepositoryMetadata");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFileRedact", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFile", "File")
                        .WithMany("Redacts")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFolder", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFolder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.Repository", "Repository")
                        .WithMany("Folders")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentFolder");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryForm", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Form.Forms", "SelectedForm")
                        .WithMany()
                        .HasForeignKey("SelectedFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.Repository", "SelectedRepositories")
                        .WithMany("RepositoryForms")
                        .HasForeignKey("SelectedRepositoriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SelectedForm");

                    b.Navigation("SelectedRepositories");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFormImport", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFolder", "PublishFolder")
                        .WithMany()
                        .HasForeignKey("PublishFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Form.Forms", "SelectedForm")
                        .WithMany()
                        .HasForeignKey("SelectedFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.Repository", "SelectedRepositories")
                        .WithMany("RepositoryFormImports")
                        .HasForeignKey("SelectedRepositoriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PublishFolder");

                    b.Navigation("SelectedForm");

                    b.Navigation("SelectedRepositories");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryMetadata", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.Repository", "Repository")
                        .WithMany("RepositoryMetadata")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryMetadataOption", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryMetadata", "RepositoryMetadata")
                        .WithMany("Options")
                        .HasForeignKey("RepositoryMetadataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RepositoryMetadata");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryPermission", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocument", "Document")
                        .WithMany("Permissons")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFile", "File")
                        .WithMany("Permissons")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryFolder", "Folder")
                        .WithMany("Permissons")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Repositories.RepositoryForm", "Form")
                        .WithMany("Permissons")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CleanArchitecture.Domain.Entities.Employee", "User")
                        .WithMany("UserPermissons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Document");

                    b.Navigation("File");

                    b.Navigation("Folder");

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Employee", b =>
                {
                    b.Navigation("UserPermissons");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.FieldOptionLists", b =>
                {
                    b.Navigation("FieldOptionValidations");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Field.Fields", b =>
                {
                    b.Navigation("FieldOptionLists");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.Barcodes", b =>
                {
                    b.Navigation("FormBarcodes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Form.Forms", b =>
                {
                    b.Navigation("FormFields");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.Repository", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("RepositoryFormImports");

                    b.Navigation("RepositoryForms");

                    b.Navigation("RepositoryMetadata");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryDocument", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Files");

                    b.Navigation("Permissons");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFile", b =>
                {
                    b.Navigation("Permissons");

                    b.Navigation("Redacts");

                    b.Navigation("RepositoryFileMetadata");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFolder", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Permissons");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryForm", b =>
                {
                    b.Navigation("Permissons");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryFormImport", b =>
                {
                    b.Navigation("FieldImportData");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.Repositories.RepositoryMetadata", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
